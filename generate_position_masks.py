#!python

import sys

def poss2int(pos):
    ret=0
    for x,y in pos:
        ret += 1<<(y*8 + x)
    return ret

def int2pos(z):
    # assumes z is of the form 1 << e (only a single bit set)
    for x in range(8):
        for y in range(8):
            if (z >> (y*8 + x)) & 1:
                return (x,y)


coverage_bool_map = lambda xt,x,yt,y : {
    "Rook"     : xt == x or yt == y,
    "Bishop"   : (xt-x) == (yt-y) or (xt-x) == -(yt-y),
    "Queen"    : (xt-x) == (yt-y) or (xt-x) == -(yt-y) or xt == x or yt == y,
    "King"     : abs(xt-x) <= 1 and abs(yt-y) <= 1,
    "Knight"   : (abs(x-xt) + abs(y-yt) == 3) and abs(x-xt)*abs(y-yt)>0,
    "PawnUp"   : (y==yt-1 and abs(x-xt) == 1),
    "PawnDown" : (y==yt+1 and abs(x-xt) == 1),
}
piece_names = coverage_bool_map(0,0,0,0).keys()

def coverage(pos, piece):
    xt,yt = pos
    poss = [(x,y) for x in range(8) for y in range(8)
            if coverage_bool_map(xt,x,yt,y)[piece]
            or (x==xt and y==yt) ]
    return poss

def printposs(poss):
    ret = [['â–ˆ' if (x,y) in poss else ' ' for x in range(8)] for y in range(8)]
    print('\n'.join([''.join(s) for s in ret]))


def generate_piece_masks():
    out = "/*\n *Piece masks\n */\n"
    for piece_name in piece_names:
        out += f"var mask{piece_name} = [64]uint64{'{'}\n\t"
        hex_strs = [ f"0x{poss2int(coverage(int2pos(1<<e), piece_name)):0>16x}" for e in range(64)]
        for i, hex_str in enumerate(hex_strs):
            out += f"{hex_str}, "
            if i%4 == 3:
                out += '\n\t'
        out = out[:-4] + '}\n\n' # Remove the last tab

    return out




def generate_board_masks():
    out = "/*\n *Board masks\n */\n"
    masks = {
        "Top"    : 0x00000000ffffffff, #(1 << 32) - 1,
        "Bottom" : 0xffffffff00000000, # ^Top
        "Left"   : 0x0f0f0f0f0f0f0f0f,
        "Right"  : 0xf0f0f0f0f0f0f0f0, # ^Left
        "TriangleSubTop" : sum([(2**(7-n)-1)<<(8*n) for n in range(0,8)]),
        "TriangleMainTop" : sum([(2**(7-n)-1)<<(9*n+1) for n in range(0,8)]),
        # "DiagMain" : sum([1<<i for i in range(0,64,9)]),
        # "DiagSub" : sum([1<<i for i in range(7,63,7)]),
    }

    for name, val in masks.items():
        out += f"const boardmask{name} uint64 = 0x{val:0>16x}\n"
    return out + '\n'

if __name__ == "__main__":
    with open("masks.go", 'w') as f:
        f.write("package main\n\n")
        f.write(f"/*\n * This code is autogenerated by {sys.argv[0]}.\n */")
        f.write(generate_board_masks())
        f.write(generate_piece_masks())

